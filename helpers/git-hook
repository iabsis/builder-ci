#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Put this file into <git bare>/.git/hooks/post-receive

import sys
import os
import requests
from yaml import load, Loader

import fileinput
from git import Repo

redmine_url = "http://redmine"
redmine_api = "28ab845575801439cf7390023995defaecfffe0f"
weblate_url = "https://translate.iabsis.com"
weblate_api = "GI3mQQB90EWM6pXuupkaKsq8gUNeWqULHfT6uE9L"
builder_url = "https://builder.iabsis.com"
builder_api = ""
old_builder_url = "https://builder"

project_name = os.getcwd().split("/")[-1]

## Extract info from stdin
for line in fileinput.input():
    oldrev, newrev, refname = line.split(" ")
    refname = refname.replace('refs/heads/', '').replace('\n', '')

## Gretting
committer_name = os.environ.get("GIT_COMMITTER_NAME")
if committer_name:
    print(
        f"Hello {committer_name}, thanks for your commit into {project_name} !!")

def trigger_build():
    repo = Repo(os.getcwd())
    yaml_content = None
    commit = repo.commit(newrev)

    for file in ['builder.yml', 'builder.yaml', 'build.yml', 'build.yaml']:
        try:
            blob = commit.tree / file
            file_content = blob.data_stream.read().decode('utf-8')
        except Exception as e:
            continue

        print(f"I found file {file}, I will check it...")

        try:
            yaml_content = load(file_content, Loader=Loader)
        except Exception as e:
            yaml_content = {}
        
        if yaml_content.get('builder'):
            print(f"Deprecation warning, the file builder.yaml contain old data, please read https://projects.iabsis.com/projects/iabsis-ch/wiki/Configure_builder#Deprecation-warning")
            post_old_builder()
        else:
            post_builder(yaml_content)
        post_weblate()


def post_builder(yaml_content=None):
    try:
        flows = yaml_content.get('flows')
    except:
        flows = None
        print(f"Hum, I can't find the key 'flows', the builder will try all possible flows" )
    
    try:
        options = yaml_content.get('flows')
    except:
        options = None
        print(f"Hum, I can't find the key 'options', the builder will build with default values if possible" )

    req = {
        "url": f"{builder_url}/api/build",
        "json": {
            "name": project_name,
            "url": f"http://redmine/git/{project_name}",
            "branch": "master",
            "flows": flows,
            "options": options
        }
    }


    res = requests.post(**req)
    if res.status_code != 200:
        print(f"Arg, I received an unexpected error: {res.text}")
    else:
        print(f"Seems all good: {res.text}")
    
def post_old_builder():
    req = {
        "url": f"{old_builder_url}/api/build",
        "json": {
            "project": project_name,
            "sources": {
                "method": "git",
                "options": {
                    "url": f"{redmine_url}/git/{project_name}",
                    "branch": refname
                }
            },
            "notify": {
                "method": "redmine"
            }
        }
    }
    res = requests.post(**req)
    if res.status_code != 200:
        print(f"Arg, I received an unexpected error: {res.text}")
    else:
        print(f"Seems all good: {res.text}")

def post_weblate():
    req = {
        "url": f"{redmine_url}/projects/{project_name}.json",
        "headers": {
            "X-Redmine-API-Key": redmine_api
        }
    }
    res = requests.get(**req)

    for field in res.json()['project']['custom_fields']:
        if field['name'] == "weblate":
            weblate_project = field['value']
            break

    if weblate_project == "":
        print(f"Weblate field not defined for this project")
        return

    req = {
        "url": f"{weblate_url}/api/components/{weblate_project}/repository/",
        "headers": {
            "Authorization": f"Token {weblate_api}",
            "Content-Type": "application/json"
        },
        "json": {
            'operation': 'pull'
        }
    }
    res = requests.post(**req)


    if res.status_code == 200 and res.json()['result']:
        print(f"Weblate notified successfully, good translations !!")
    else:
        print(f"An error has occured while notifing weblate: {res.text}")


if __name__ == "__main__":
    trigger_build()


